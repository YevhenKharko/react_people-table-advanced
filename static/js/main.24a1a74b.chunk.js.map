{"version":3,"sources":["components/Navbar/Navbar.tsx","components/HomePage/HomePage.tsx","components/Loader/Loader.tsx","api.ts","components/PersonLink/PersonLink.tsx","utils/searchHelper.ts","components/SearchLink/SearchLink.tsx","components/PeopleTable/PeopleTable.tsx","components/PeopleFilters/PeopleFilters.tsx","components/PeoplePage/PeoplePage.tsx","components/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["Navbar","isLinkActive","isActive","cn","className","role","to","HomePage","Loader","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","useSearchParams","searchParams","pathname","slug","search","toString","sex","name","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","columns","PeopleTable","people","useParams","sort","get","order","getPersonByName","find","length","map","column","lCaseColumn","toLowerCase","newSort","newOrder","mother","motherName","father","fatherName","born","died","filteredCenturies","filteredSex","All","Male","Female","PeopleFilters","setSearchParams","query","centuries","getAll","sexObj","type","placeholder","onChange","e","target","trim","century","includes","filter","c","PeoplePage","useState","peopleFromServer","setPeopleFromServer","error","setError","isLoading","setIsLoading","useEffect","getPeople","data","catch","finally","visiblePeople","a","b","localeCompare","reverse","centuriesNumbers","Math","ceil","NotFoundPage","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.24a1a74b.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport const Navbar = () => {\n  const isLinkActive = ({ isActive }: { isActive: boolean }): string => {\n    return cn('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    });\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={isLinkActive}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={isLinkActive}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => <h1 className=\"title\">Home Page</h1>;\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { FC } from 'react';\nimport { NavLink, useSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person?: Person;\n};\n\nexport const PersonLink: FC<Props> = ({ person }) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <NavLink\n      to={{ pathname: `../${person?.slug}`, search: searchParams.toString() }}\n      className={cn({\n        'has-text-danger': person?.sex === 'f',\n      })}\n    >\n      {person?.name}\n    </NavLink>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { FC } from 'react';\nimport { useParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\nimport { SearchLink } from '../SearchLink';\n\ntype Props = {\n  people: Person[],\n  searchParams: URLSearchParams,\n};\n\nconst columns = ['Name', 'Sex', 'Born', 'Died', 'Mother', 'Father'];\n\nexport const PeopleTable: FC<Props> = ({\n  people,\n  searchParams,\n}) => {\n  const { slug } = useParams();\n  // const slug = searchParams.get('slug');\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const getPersonByName = (name: string): Person | undefined => {\n    return people.find(person => person.name === name);\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      {!people.length\n        ? <p>There are no people matching the current search criteria</p>\n        : (\n          <>\n            <thead>\n              <tr>\n                {columns.map(column => {\n                  const lCaseColumn = column.toLowerCase();\n\n                  const newSort = sort === lCaseColumn\n                    && order === 'desc' ? null : lCaseColumn;\n\n                  let newOrder = null;\n\n                  if (sort === lCaseColumn) {\n                    if (order === 'desc') {\n                      newOrder = null;\n                    } else {\n                      newOrder = 'desc';\n                    }\n                  }\n\n                  if (column === 'Father' || column === 'Mother') {\n                    return <th key={column}>{column}</th>;\n                  }\n\n                  return (\n                    <th key={column}>\n                      <span className=\"is-flex is-flex-wrap-nowrap\">\n                        {column}\n                        <SearchLink params={{\n                          sort: newSort,\n                          order: newOrder,\n                        }}\n                        >\n                          <span className=\"icon\">\n                            <i\n                              className={cn('fas', {\n                                'fa-sort': sort !== lCaseColumn,\n                                'fa-sort-up': sort === lCaseColumn\n                                  && order !== 'desc',\n                                'fa-sort-down': sort === lCaseColumn\n                                  && order === 'desc',\n                              })}\n                            />\n                          </span>\n                        </SearchLink>\n                      </span>\n                    </th>\n                  );\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {people.map(person => {\n                const mother = getPersonByName(person.motherName || '-');\n                const father = getPersonByName(person.fatherName || '-');\n\n                return (\n                  <tr\n                    data-cy=\"person\"\n                    key={person.slug}\n                    className={cn({\n                      'has-background-warning': slug === person.slug,\n                    })}\n                  >\n                    <td>\n                      <PersonLink\n                        person={person}\n                      />\n                    </td>\n\n                    <td>{person.sex}</td>\n\n                    <td>{person.born}</td>\n\n                    <td>{person.died}</td>\n\n                    <td>\n                      {mother ? (\n                        <PersonLink\n                          person={mother}\n                        />\n                      ) : (\n                        person.motherName || '-'\n                      )}\n                    </td>\n\n                    <td>\n                      {father ? (\n                        <PersonLink\n                          person={father}\n                        />\n                      ) : (\n                        person.fatherName || '-'\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </>\n        )}\n    </table>\n  );\n};\n","import { FC } from 'react';\nimport { SetURLSearchParams } from 'react-router-dom';\nimport cn from 'classnames';\nimport { SearchLink } from '../SearchLink';\nimport { getSearchWith } from '../../utils/searchHelper';\n\ntype Props = {\n  searchParams: URLSearchParams,\n  setSearchParams: SetURLSearchParams,\n};\n\nconst filteredCenturies = ['16', '17', '18', '19', '20'];\nconst filteredSex = [\n  { All: null },\n  { Male: 'm' },\n  { Female: 'f' },\n];\n\nexport const PeopleFilters: FC<Props> = ({ searchParams, setSearchParams }) => {\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries');\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newParams = getSearchWith(\n      searchParams, { query: e.target.value.trim().toLowerCase() || null },\n    );\n\n    setSearchParams(newParams);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {filteredSex.map((sexObj) => {\n          const [key, value] = Object.entries(sexObj)[0];\n\n          return (\n            <SearchLink\n              key={value}\n              params={{\n                sex: value,\n              }}\n              className={cn({ 'is-active': sex === value })}\n            >\n              {key}\n            </SearchLink>\n          );\n        })}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n\n          <div className=\"level-left\">\n            {filteredCenturies.map(century => {\n              return (\n                <SearchLink\n                  key={century}\n                  params={{\n                    centuries: centuries.includes(century)\n                      ? centuries.filter(c => c !== century)\n                      : [...centuries, century],\n                  }}\n                  data-cy=\"century\"\n                  className={cn(\n                    'button',\n                    'mr-1',\n                    { 'is-info': centuries.includes(century) },\n                  )}\n                >\n                  {century}\n                </SearchLink>\n              );\n            })}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={cn('button is-success', {\n                'is-outlined': centuries.length,\n              })}\n              params={{\n                centuries: null,\n              }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","/* eslint-disable no-nested-ternary */\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Loader } from '../Loader';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { PeopleTable } from '../PeopleTable/PeopleTable';\nimport { PeopleFilters } from '../PeopleFilters';\n\nexport const PeoplePage = () => {\n  const [peopleFromServer, setPeopleFromServer] = useState<Person[]>([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n  const query = searchParams.get('query');\n  const sex = searchParams.get('sex');\n  const centuries = searchParams.getAll('centuries');\n\n  useEffect(() => {\n    getPeople()\n      .then((data) => setPeopleFromServer(data))\n      .catch(() => setError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  let visiblePeople = [...peopleFromServer];\n\n  if (sort) {\n    visiblePeople.sort((a, b) => {\n      switch (sort) {\n        case ('name'):\n          return a.name.localeCompare(b.name);\n\n        case ('sex'):\n          return a.sex.localeCompare(b.sex);\n\n        case ('age'):\n          return (a.died - a.born) - (b.died - b.died);\n\n        case ('born'):\n          return (a.born - b.born);\n\n        case ('died'):\n          return (a.died - b.died);\n\n        default:\n          return 0;\n      }\n    });\n\n    if (order === 'desc') {\n      visiblePeople.reverse();\n    }\n  }\n\n  if (query) {\n    visiblePeople = visiblePeople.filter(({ name, motherName, fatherName }) => {\n      if (!visiblePeople.length) {\n        setError(true);\n      }\n\n      return (\n        name.toLowerCase().includes(query)\n        || motherName?.toLowerCase().includes(query)\n        || fatherName?.toLowerCase().includes(query)\n      );\n    });\n  }\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (centuries.length) {\n    const centuriesNumbers = centuries.map(c => +c);\n\n    visiblePeople = visiblePeople\n      .filter(person => centuriesNumbers\n        .includes(Math.ceil(person.born / 100)));\n  }\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!isLoading && (\n              <PeopleFilters\n                searchParams={searchParams}\n                setSearchParams={setSearchParams}\n              />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading ? (\n                <Loader />\n              ) : error ? (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              ) : peopleFromServer.length ? (\n                <PeopleTable\n                  people={visiblePeople}\n                  searchParams={searchParams}\n                />\n              ) : (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => <h1 className=\"title\">Page not found</h1>;\n","import { Routes, Route, Navigate } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport './App.scss';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/people\">\n            <Route path=\":slug?\" element={<PeoplePage />} />\n          </Route>\n          <Route path=\"/*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}